Program lab7;
// Program removes odd elements

{$APPTYPE CONSOLE} // Console app

// Modules declaration
Uses
  System.SysUtils;

// Variables declaration
Var
  Str, LastWord: string;
  Word, Letter, Temp: string;
  i, j, l, k: integer;
  Checker: boolean;
  BoolMas: array [1 .. 8] of boolean;
  checkForK: boolean;
  { Str - original string;
    LastWord - the last word;
    Word - current checking word;
    Letter - 1-st, 2-nd, etc. letter of Word;
    Temp - variable, which contains palindrom of LastWord;
    i - cycle counter;
    j - cycle counter;
    l - cycle counter;
    k - the number of repetitions of the letter;
    Checker - variable, which is used to find mistakes and
    to delete words withrepeating letters;
    BoolMas - Logical array for "deleting" checked letters in a word;
    checkForK - variable to check the number of
    repetitions of letters in a word. }

  // Start the program
Begin

  // Mistakes checker
  repeat

    // Set checker to the original value
    Checker := true;

    // Input String
    write('Введите вашу строку: ');
    readln(Str);

    // Check condition of only english letters, allowing
    // input spaces and сommas
    if length(Str) <> 0 then
    begin
      for i := 1 to length(Str) - 1 do
      begin
        if ((ord(Str[i]) < 96) or (ord(Str[i]) > 125)) and (Str[i] <> ' ') and
          (Str[i] <> ',') then
          Checker := false;
      end;
    end

    // If nothing was inputted
    else
      Str := ' '; (* In order to make insufficient input *)

    // If mistake was found
    if (Str[1] = ',') or (Str = '') or
      ((pos(' ', Str) = 0) and (pos(',', Str) = 0)) or (Checker = false) or
      (Str[length(Str)] <> '.') then
      writeln('Ошибка ввода');

    // If input is sufficient
  until (Str[1] <> ',') and (Checker = true) and (Str[length(Str)] = '.') and
    (Str <> '') and ((pos(' ', Str) <> 0) or (pos(',', Str) <> 0));

  // Removing extra commas
  for i := 1 to length(Str) do
  begin
    if (Str[i] = Str[i + 1]) and (Str[i] = ',') then
    begin
      delete(Str, i + 1, 1);
    end;
  end;

  // Removing extra spaces before the dot
  repeat
    if Str[length(Str) - 1] = ' ' then
      delete(Str, length(Str) - 1, 1);
  until (Str[length(Str) - 1] <> ' ');

  // Set Temp to the original value
  Temp := '';

  // Set i to the original value
  i := length(Str) - 1;

  // Find palindrom of the last word
  while (Str[i] <> ',') and (Str[i] <> ' ') do
  begin
    Temp := Temp + copy(Str, i, 1);
    dec(i);
  end;

  // Set LastWord to the original value
  LastWord := '';

  // Write palindrom of the last word in reverse order
  for i := 1 to length(Temp) do
    LastWord := Temp[i] + LastWord;

  // Output original string and last word
  writeln('Исходная строка: ', Str);
  writeln('Последнее слово: ', LastWord);
  write('Преобразованная строка: ');

  // Set i to the original value
  i := 1;

  // While Str[i] not equals '.'
  while Str[i] <> '.' do
  begin

    // If new word was found
    if (Str[i] <> ' ') and (Str[i] <> ',') then
    begin

      // Set checker to the original value
      Checker := true;

      // Set Word to the original value
      Word := '';

      // Find Word
      while (Str[i] <> ' ') and (Str[i] <> ',') and (i < length(Str)) do
      begin
        Word := Word + Str[i];
        inc(i);
      end;

      // Boolean massive for removing checking letters from Word
      for l := 1 to 8 do
        BoolMas[l] := true;

      // Check if there are repeated letters in Word
      j := 1;
      // Set checkForK to the original value
      checkForK := true;
      while (j <= length(Word)) and (checkForK = true) do
      begin

        // If this letter hasn't been there yet
        if BoolMas[j] = true then
        begin

          // Copy 1-st, 2-nd, ... letter of the word
          Letter := copy(Word, j, 1);

          // Number of repetitions of a new letter
          k := 1;

          // Search for repetitions of letters and their "removal"
          for l := j + 1 to length(Word) do
          begin
            if Letter = Word[l] then
            begin
              // Increasing the number of repetitions
              k := k + 1;
              // "Delete" the letter
              BoolMas[l] := false;
            end;
          end;

          // Check for at least 3 repetitions of the
          // letter in the word, if this is incorrect,
          // do not check this word further
          if k < 3 then
            checkForK := false

        end;
        j := j + 1;
      end;

      // If found word is not equals to last word and
      // there is no repeated lettters
      if (Word <> LastWord) and (checkForK = true) then
        write(Word, ' ');
    end

    // If we met space or comma
    else
      inc(i);

  end;

  // Final operations
  readln;

End.
